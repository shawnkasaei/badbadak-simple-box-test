//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Systems/CustomInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f8c4457c-01be-48f6-8b0c-65ae88e9f7b1"",
            ""actions"": [
                {
                    ""name"": ""InputSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""73854932-7313-4426-ab05-6e0c0ffec636"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7921c9f1-cedd-4489-b89c-7f67df2976dd"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookDelta"",
                    ""type"": ""Value"",
                    ""id"": ""4337adf5-d32d-4d52-8207-03948b179e31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookArrows [UI Buttons]"",
                    ""type"": ""Value"",
                    ""id"": ""d06a7d6c-4736-4c79-b005-1df661aa62ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""fec699b2-4ee0-415f-8594-11aeaf7d3ce6"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""836e4b48-608b-4e31-8f86-545e5c45d601"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""864a0e90-2d3c-46b8-8538-c4b307916414"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""3c99563e-92ec-4412-84de-1aa053aef9ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""7328aa04-be14-45a1-96af-32bd9ab4f10c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""a1792fe5-47d9-4248-a61b-0b62ea7e1d2b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookArrows [UI Buttons]"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b49b30b0-d5f2-479f-8aa5-aab556812202"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookArrows [UI Buttons]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d038fef9-39d8-4628-a3cf-daea038ec90c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookArrows [UI Buttons]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af66b54d-312a-4abf-9ffc-a619f28c457c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookArrows [UI Buttons]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5f7f1c18-41b4-468a-b159-7baeaa9bcc23"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookArrows [UI Buttons]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""304eb589-883f-4bbf-9ae7-bb36193e902e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""369d38da-5209-4621-8441-c661e8b30b9b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf3cb8f7-933b-4f7b-a031-fa6b85a0e1e2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0492e0df-69e1-42c2-82e1-e818b5e00ee3"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_InputSwitch = m_Player.FindAction("InputSwitch", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_LookDelta = m_Player.FindAction("LookDelta", throwIfNotFound: true);
        m_Player_LookArrowsUIButtons = m_Player.FindAction("LookArrows [UI Buttons]", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_InputSwitch;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_LookDelta;
    private readonly InputAction m_Player_LookArrowsUIButtons;
    public struct PlayerActions
    {
        private @CustomInputActions m_Wrapper;
        public PlayerActions(@CustomInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputSwitch => m_Wrapper.m_Player_InputSwitch;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @LookDelta => m_Wrapper.m_Player_LookDelta;
        public InputAction @LookArrowsUIButtons => m_Wrapper.m_Player_LookArrowsUIButtons;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @InputSwitch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInputSwitch;
                @InputSwitch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInputSwitch;
                @InputSwitch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInputSwitch;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @LookDelta.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookDelta;
                @LookDelta.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookDelta;
                @LookDelta.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookDelta;
                @LookArrowsUIButtons.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookArrowsUIButtons;
                @LookArrowsUIButtons.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookArrowsUIButtons;
                @LookArrowsUIButtons.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookArrowsUIButtons;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InputSwitch.started += instance.OnInputSwitch;
                @InputSwitch.performed += instance.OnInputSwitch;
                @InputSwitch.canceled += instance.OnInputSwitch;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @LookDelta.started += instance.OnLookDelta;
                @LookDelta.performed += instance.OnLookDelta;
                @LookDelta.canceled += instance.OnLookDelta;
                @LookArrowsUIButtons.started += instance.OnLookArrowsUIButtons;
                @LookArrowsUIButtons.performed += instance.OnLookArrowsUIButtons;
                @LookArrowsUIButtons.canceled += instance.OnLookArrowsUIButtons;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnInputSwitch(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnLookDelta(InputAction.CallbackContext context);
        void OnLookArrowsUIButtons(InputAction.CallbackContext context);
    }
}
